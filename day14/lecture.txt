Authentication -Identification 
Authorization - Providing accessible
Flow 
=> /register (POST)=> So that we can post the user details into the database registration Process
=>/login (POST) =>So this was to send the email and pass to server so that it can be compared and user can login
=>(Authentication)

Authorization
=>/moviedata (secured)=>Restricted (Permission)
=>/userdetails(secured)=>Restricted (Permission)


ways to provide accessible
1st Way :Send Email and password whenever the client is going to send  a request at restricted routes (Not an optimised approach)
2nd Way : (Unique Identification ) ==>Token ==>Random and unique for the clients
we will take help of JWT ==>Authentication,Authorization and also exchanging some information
==>Header ==>What type of token it is and the encryption algorithm 
==>Random Playload ==>It consists some extra information about the token ,which helps in generatiing the token and authenticate or authorize 

New Client 
Step 1:Registration =>/register (POST)
Step 2:Login==>/login(POST) ==>Successful login ==>1. Login message , 2. Providing the token (JWT)==>jwt.sign
                            ==>Failed Login ==> send the response with error message
Step 3. Accessing the restricted route 

==>Before sending the response , check for Access (Authorization)
   ==>How? ==>By the help of Token 
   ===>what is token ? 1st Way => passing the token in the query and then handle it at the backend .(not a good way)
                       2nd way =>passing the token in headers (we are going to go with this )




  ==>Got the token ==> we need to verify the token =>JWT ==>JWT.verify ==>decoded ==>if (decoded ==true) 
                                                                                ===>provide the access to the route
                                                                                else 
                                                                                ==>plz login first 

   8888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888




   fetch (url,{
    method:"POST ",
    headers:{
        authorization :`Bearer ${token}`
    }
   })                                                                                                  